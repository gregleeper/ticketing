{"ast":null,"code":"// Create our number formatter.\nexport var formatMoney = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\" // These options are needed to round to whole numbers if that's what you want.\n  //minimumFractionDigits: 0,\n  //maximumFractionDigits: 0,\n\n});\nexport function groupBy(list, keyGetter) {\n  var map = new Map();\n  list.forEach(function (item) {\n    var key = keyGetter(item);\n    var collection = map.get(key);\n\n    if (!collection) {\n      map.set(key, [item]);\n    } else {\n      collection.push(item);\n    }\n  });\n  return map;\n}\nexport function computeAvgNetTons(group) {\n  var sum = 0;\n  var itemsFound = 0;\n  var len = group && group.length;\n  var item = null;\n\n  for (var i = 0; i < len; i++) {\n    item = group[i];\n\n    if (item) {\n      sum = item.netTons + sum;\n      itemsFound++;\n    }\n\n    return sum / itemsFound;\n  }\n}\nexport function computeAvgContractPrice(group) {\n  var sum = 0;\n  var itemsFound = 0;\n  var len = group && group.length;\n  var item = null;\n\n  for (var i = 0; i < len; i++) {\n    item = group[i].contract;\n\n    if (item) {\n      sum = item.contractPrice + sum;\n      itemsFound++;\n    }\n\n    return sum / itemsFound;\n  }\n}\nexport function computeAvgSalePrice(group) {\n  var sum = 0;\n  var itemsFound = 0;\n  var len = group && group.length;\n  var item = null;\n\n  for (var i = 0; i < len; i++) {\n    item = group[i].contract;\n\n    if (item) {\n      sum = item.salePrice + sum;\n      itemsFound++;\n    }\n\n    return sum / itemsFound;\n  }\n}\nexport function computeSum(group) {\n  var sum = 0;\n  var item = null;\n  var len = group && group.length;\n\n  for (var i = 0; i < len; i++) {\n    item = group[i];\n\n    if (item) {\n      sum = item.netTons + sum;\n    }\n  }\n\n  return Number.parseFloat(sum).toFixed(2);\n}\nexport function truncateString(str, num) {\n  // If the length of str is less than or equal to num\n  // just return str--don't truncate it.\n  if (str.length <= num) {\n    return str;\n  } // Return str truncated with '...' concatenated to the end of str.\n\n\n  return str.slice(0, num) + \"...\";\n}","map":{"version":3,"sources":["/Users/gregleeper/jds/utils/index.js"],"names":["formatMoney","Intl","NumberFormat","style","currency","groupBy","list","keyGetter","map","Map","forEach","item","key","collection","get","set","push","computeAvgNetTons","group","sum","itemsFound","len","length","i","netTons","computeAvgContractPrice","contract","contractPrice","computeAvgSalePrice","salePrice","computeSum","Number","parseFloat","toFixed","truncateString","str","num","slice"],"mappings":"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","sourcesContent":["// Create our number formatter.\nexport const formatMoney = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n\n  // These options are needed to round to whole numbers if that's what you want.\n  //minimumFractionDigits: 0,\n  //maximumFractionDigits: 0,\n});\n\nexport function groupBy(list, keyGetter) {\n  const map = new Map();\n  list.forEach((item) => {\n    const key = keyGetter(item);\n    const collection = map.get(key);\n    if (!collection) {\n      map.set(key, [item]);\n    } else {\n      collection.push(item);\n    }\n  });\n  return map;\n}\n\nexport function computeAvgNetTons(group) {\n  let sum = 0;\n  let itemsFound = 0;\n  const len = group && group.length;\n  let item = null;\n  for (let i = 0; i < len; i++) {\n    item = group[i];\n    if (item) {\n      sum = item.netTons + sum;\n      itemsFound++;\n    }\n    return sum / itemsFound;\n  }\n}\n\nexport function computeAvgContractPrice(group) {\n  let sum = 0;\n  let itemsFound = 0;\n  const len = group && group.length;\n  let item = null;\n  for (let i = 0; i < len; i++) {\n    item = group[i].contract;\n    if (item) {\n      sum = item.contractPrice + sum;\n      itemsFound++;\n    }\n    return sum / itemsFound;\n  }\n}\nexport function computeAvgSalePrice(group) {\n  let sum = 0;\n  let itemsFound = 0;\n  const len = group && group.length;\n  let item = null;\n  for (let i = 0; i < len; i++) {\n    item = group[i].contract;\n\n    if (item) {\n      sum = item.salePrice + sum;\n      itemsFound++;\n    }\n    return sum / itemsFound;\n  }\n}\n\nexport function computeSum(group) {\n  let sum = 0;\n  let item = null;\n  let len = group && group.length;\n  for (let i = 0; i < len; i++) {\n    item = group[i];\n    if (item) {\n      sum = item.netTons + sum;\n    }\n  }\n\n  return Number.parseFloat(sum).toFixed(2);\n}\n\nexport function truncateString(str, num) {\n  // If the length of str is less than or equal to num\n  // just return str--don't truncate it.\n  if (str.length <= num) {\n    return str;\n  }\n  // Return str truncated with '...' concatenated to the end of str.\n  return str.slice(0, num) + \"...\";\n}\n"]},"metadata":{},"sourceType":"module"}