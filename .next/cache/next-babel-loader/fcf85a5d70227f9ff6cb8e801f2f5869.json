{"ast":null,"code":"import _toConsumableArray from \"/Users/gregleeper/jds/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/gregleeper/jds/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/gregleeper/jds/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/gregleeper/jds/pages/reports/commodity-ton-totals.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { API } from \"aws-amplify\";\nimport ReactToPrint from \"react-to-print\";\nimport Table from \"../../components/table\";\nimport { useEffect, useState, useMemo, useRef } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { computeAvgNetTons, groupBy } from \"../../utils\";\nimport moment from \"moment\";\nimport Layout from \"../../components/layout\";\nimport { ticketsByDate, contractsByType } from \"../../src/graphql/customQueries\";\nimport { listCommoditys } from \"../../src/graphql/queries.ts\";\nimport { useQuery, useInfiniteQuery, useQueryCache } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query-devtools\";\n\nvar CommodityTotals = function CommodityTotals() {\n  _s();\n\n  var cache = useQueryCache();\n  var toPrint = useRef(null);\n\n  var _useState = useState(cache.getQueryData(\"cctDates\") ? cache.getQueryData(\"cctDates\").beginDate : null),\n      beginDate = _useState[0],\n      setBeginDate = _useState[1];\n\n  var _useState2 = useState(cache.getQueryData(\"cctDates\") ? cache.getQueryData(\"cctDates\").endDate : null),\n      endDate = _useState2[0],\n      setEndDate = _useState2[1];\n\n  var _useState3 = useState([]),\n      tickets = _useState3[0],\n      setTickets = _useState3[1];\n\n  var _useState4 = useState([]),\n      ticketsYTD = _useState4[0],\n      setTicketsYTD = _useState4[1];\n\n  var _useState5 = useState([]),\n      commodities = _useState5[0],\n      setCommodities = _useState5[1];\n\n  var _useState6 = useState([]),\n      totals = _useState6[0],\n      setTotals = _useState6[1];\n\n  var _useState7 = useState(true),\n      isInitialLoad = _useState7[0],\n      setIsInitialLoad = _useState7[1];\n\n  var _useQuery = useQuery(\"commodities\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _yield$API$graphql, myCommodities;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return API.graphql({\n              query: listCommoditys\n            });\n\n          case 2:\n            _yield$API$graphql = _context.sent;\n            myCommodities = _yield$API$graphql.data.listCommoditys;\n            return _context.abrupt(\"return\", myCommodities);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))),\n      commodityData = _useQuery.data; // const { data: initTicketsData, refetch, isFetched } = useQuery(\n  //   \"commodityTonTotals\",\n  //   async () => {\n  //     const {\n  //       data: { ticketsByDate: initTickets },\n  //     } = await API.graphql({\n  //       query: listReportTickets,\n  //       variables: {\n  //         limit: 2000,\n  //         filter: {\n  //           ticketDate: {\n  //             between: [\n  //               moment(beginDate).startOf(\"day\"),\n  //               moment(endDate).endOf(\"day\"),\n  //             ],\n  //           },\n  //         },\n  //       },\n  //     });\n  //     return initTickets;\n  //   },\n  //   {\n  //     enabled: false,\n  //     cacheTime: 1000 * 60 * 59,\n  //     refetchOnWindowFocus: false,\n  //     refetchOnMount: false,\n  //     refetchIntervalInBackground: false,\n  //     refetchOnReconnect: true,\n  //     forceFetchOnMount: false,\n  //     keepPreviousData: false,\n  //   }\n  // );\n  // const {\n  //   status,\n  //   data: ticketsDataInfinite,\n  //   error,\n  //   isFetching,\n  //   isFetchingMore,\n  //   isSuccess,\n  //   fetchMore,\n  //   canFetchMore,\n  // } = useInfiniteQuery(\n  //   \"commodityTonTotals\",\n  //   async (\n  //     key,\n  //     nextToken = cache.getQueryData(\"commodityTonTotals\").nextToken\n  //   ) => {\n  //     const {\n  //       data: { ticketsByDate: ticketData },\n  //     } = await API.graphql({\n  //       query: listReportTickets,\n  //       variables: {\n  //         limit: 2000,\n  //         filter: {\n  //           ticketDate: {\n  //             between: [\n  //               moment(beginDate).startOf(\"day\"),\n  //               moment(endDate).endOf(\"day\"),\n  //             ],\n  //           },\n  //         },\n  //         nextToken,\n  //       },\n  //     });\n  //     return ticketData;\n  //   },\n  //   {\n  //     enabled: false,\n  //     getFetchMore: (lastGroup, allGroups) => lastGroup.nextToken,\n  //     cacheTime: 1000 * 60 * 60,\n  //     refetchOnWindowFocus: false,\n  //     forceFetchOnMount: false,\n  //     keepPreviousData: false,\n  //   }\n  // );\n\n\n  var _useQuery2 = useQuery(\"commodityTonTotalsYTD\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _yield$API$graphql2, initTicketsYTD;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return API.graphql({\n              query: contractsByType,\n              variables: {\n                limit: 20,\n                filter: {\n                  contractState: {\n                    eq: \"ACTIVE\"\n                  }\n                },\n                ticketFilter: {\n                  ticketDate: {\n                    between: [moment().startOf(\"year\"), moment(endDate).endOf(\"date\")]\n                  }\n                },\n                contractType: \"SALE\"\n              }\n            });\n\n          case 2:\n            _yield$API$graphql2 = _context2.sent;\n            initTicketsYTD = _yield$API$graphql2.data.contractsByType;\n            return _context2.abrupt(\"return\", initTicketsYTD);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), {\n    enabled: false,\n    cacheTime: 1000 * 60 * 59,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchIntervalInBackground: false,\n    refetchOnReconnect: true\n  }),\n      ytdTicketsData = _useQuery2.data,\n      refetchYTD = _useQuery2.refetch;\n\n  var _useInfiniteQuery = useInfiniteQuery(\"commodityTonTotalsYTD\", /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {\n      var nextToken,\n          _yield$API$graphql3,\n          ticketData,\n          _args3 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              nextToken = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : cache.getQueryData(\"commodityTonTotalsYTD\").nextToken;\n              _context3.next = 3;\n              return API.graphql({\n                query: contractsByType,\n                variables: {\n                  limit: 20,\n                  contractType: \"SALE\",\n                  filter: {\n                    contractState: {\n                      eq: \"ACTIVE\"\n                    }\n                  },\n                  ticketFilter: {\n                    ticketDate: {\n                      between: [moment().startOf(\"year\"), moment(endDate).endOf(\"day\")]\n                    }\n                  },\n                  nextToken: nextToken\n                }\n              });\n\n            case 3:\n              _yield$API$graphql3 = _context3.sent;\n              ticketData = _yield$API$graphql3.data.contractsByType;\n              return _context3.abrupt(\"return\", ticketData);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), {\n    enabled: false,\n    getFetchMore: function getFetchMore(lastGroup, allGroups) {\n      return lastGroup.nextToken;\n    },\n    cacheTime: 1000 * 60 * 60,\n    refetchOnWindowFocus: false\n  }),\n      ytdStatus = _useInfiniteQuery.status,\n      ytdData = _useInfiniteQuery.data,\n      ytdError = _useInfiniteQuery.error,\n      isFetched = _useInfiniteQuery.isFetched,\n      ytdIsFetching = _useInfiniteQuery.isFetching,\n      ytdIsFetchingMore = _useInfiniteQuery.isFetchingMore,\n      ytdFetchMore = _useInfiniteQuery.fetchMore,\n      canFetchMore = _useInfiniteQuery.canFetchMore,\n      isSuccess = _useInfiniteQuery.isSuccess;\n\n  var computeTotals = function computeTotals() {\n    var startBeginDate = moment(beginDate).startOf(\"date\");\n    var endOfEndDate = moment(endDate).endOf(\"date\");\n    var filteredByWeek = ticketsYTD.filter(function (ticket) {\n      return moment(ticket.ticketDate).isSameOrAfter(startBeginDate) && moment(ticket.ticketDate).isSameOrBefore(endOfEndDate);\n    });\n    var groupedYTD = groupBy(ticketsYTD, function (ticket) {\n      return ticket.contract.commodity.name;\n    });\n    var grouped = groupBy(filteredByWeek, function (ticket) {\n      return ticket.contract.commodity.name;\n    });\n    var array = [];\n    commodities.map(function (c) {\n      var commodityTotal = {};\n      var group = grouped.get(c.name);\n      console.log(group);\n      var ytdGroup = groupedYTD.get(c.name);\n      commodityTotal.commodity = c.name;\n      commodityTotal.weekNumLoads = group ? group.length : 0;\n      commodityTotal.yearNumLoads = ytdGroup ? ytdGroup.length : 0;\n      commodityTotal.weekAvgTons = group ? group.reduce(function (acc, cv) {\n        return acc + cv.netTons;\n      }, 0) / group.length : 0;\n      commodityTotal.yearAvgTons = ytdGroup ? ytdGroup.reduce(function (acc, cv) {\n        return acc + cv.netTons;\n      }, 0) / ytdGroup.length : 0;\n      array.push(commodityTotal);\n    });\n    setTotals(array);\n  };\n\n  var computeWeekTotalAvg = function computeWeekTotalAvg() {\n    var count = 0;\n    totals.map(function (t) {\n      if (t.weekAvgTons) {\n        count++;\n      }\n    });\n    console.log(totals.reduce(function (a, cv) {\n      return a + cv.weekAvgTons;\n    }, 0));\n    return totals.reduce(function (a, cv) {\n      return a + cv.weekAvgTons;\n    }, 0) / count;\n  };\n\n  var computeYearTotalAvg = function computeYearTotalAvg() {\n    var count = 0;\n    totals.map(function (t) {\n      if (t.yearAvgTons) {\n        count++;\n      }\n    });\n    return totals.reduce(function (a, cv) {\n      return a + cv.yearAvgTons;\n    }, 0) / count;\n  };\n\n  useEffect(function () {\n    if (commodityData) {\n      setCommodities(commodityData.items);\n    }\n  }, [commodityData]);\n  useEffect(function () {\n    if (totals.length) {\n      totals.sort(function (a, b) {\n        var nameA = a.commodity;\n        var nameB = b.commodity;\n\n        if (nameA < nameB) {\n          return -1;\n        }\n\n        if (nameA > nameB) {\n          return 1;\n        }\n\n        return 0;\n      });\n    }\n  }, [totals]);\n  useEffect(function () {\n    if (ytdTicketsData) {\n      ytdFetchMore();\n    }\n\n    if (ytdTicketsData && canFetchMore && !ytdIsFetchingMore) {\n      ytdFetchMore();\n    }\n\n    if (ytdTicketsData && ytdTicketsData.length && !canFetchMore) {\n      compileDataYTD();\n    }\n  }, [ytdTicketsData]); // useEffect(() => {\n  //   if (initTicketsData) {\n  //     fetchMore();\n  //   }\n  //   if (initTicketsData && canFetchMore && !isFetchingMore) {\n  //     fetchMore();\n  //   }\n  //   if (initTicketsData && initTicketsData.length && !canFetchMore) {\n  //     compileData();\n  //   }\n  // }, [initTicketsData]);\n\n  useEffect(function () {\n    if (ticketsYTD.length > 0) {\n      computeTotals();\n      cache.setQueryData(\"cctDates\", {\n        beginDate: beginDate,\n        endDate: endDate\n      });\n    }\n  }, [ticketsYTD]);\n\n  var handleFetchQueries = function handleFetchQueries() {\n    setTickets([]);\n    setTicketsYTD([]);\n    setTotals([]);\n    refetchYTD();\n  }; // const compileData = () => {\n  //   if (isInitialLoad) {\n  //     let array = [...tickets];\n  //     ticketsDataInfinite &&\n  //       ticketsDataInfinite.map((group, i) => {\n  //         group.items.map((item) => array.push(item));\n  //       });\n  //     setTickets(array);\n  //     setIsInitialLoad(false);\n  //   } else {\n  //     let array = [];\n  //     ticketsDataInfinite &&\n  //       ticketsDataInfinite.map((group, i) => {\n  //         group.items.map((item) => array.push(item));\n  //       });\n  //     setTickets(array);\n  //   }\n  // };\n\n\n  var compileDataYTD = function compileDataYTD() {\n    if (isInitialLoad) {\n      var array = _toConsumableArray(ticketsYTD);\n\n      ytdData && ytdData.map(function (group, i) {\n        group.items.map(function (item) {\n          item.tickets.items.length ? array.push(item.tickets.items) : null;\n        });\n      });\n      setTicketsYTD(array.flat());\n      setIsInitialLoad(false);\n    } else {\n      var _array = [];\n      ytdData && ytdData.map(function (group, i) {\n        group.items.map(function (item) {\n          item.tickets.items.length ? _array.push(item.tickets.items) : null;\n        });\n      });\n      setTicketsYTD(_array.flat());\n    }\n  };\n\n  console.log(ticketsYTD);\n  var columns = useMemo(function () {\n    return [{\n      Header: \"Commodity\",\n      accessor: \"commodity\"\n    }, {\n      Header: \"Weekly Number of Loads\",\n      accessor: \"weekNumLoads\"\n    }, {\n      Header: \"Year Number of Loads\",\n      accessor: \"yearNumLoads\"\n    }, {\n      Header: \"Week Avg Tons\",\n      accessor: \"weekAvgTons\"\n    }, {\n      Header: \"YTD Avg Tons\",\n      accessor: \"yearAvgTons\"\n    }];\n  }, []);\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"px-12\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"text-center w-1/2 mx-auto py-6 text-2xl font-bold\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 11\n    }\n  }, \"Commodity Ton Totals\")), __jsx(ReactToPrint, {\n    trigger: function trigger() {\n      return __jsx(\"a\", {\n        href: \"#\",\n        className: \"px-3 py-2 border border-gray-800 shadow hover:bg-gray-800 hover:text-white\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }\n      }, \"Print Report\");\n    },\n    content: function content() {\n      return toPrint;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: \"w-7/12 mx-auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"flex justify-between items-end w-1/2 mx-auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 13\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 15\n    }\n  }, \"Begin Date\"), __jsx(DatePicker, {\n    selected: beginDate,\n    onChange: function onChange(date) {\n      return setBeginDate(date);\n    },\n    className: \"form-input w-full\",\n    startDate: beginDate,\n    selectsStart: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 15\n    }\n  })), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 13\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 15\n    }\n  }, \"End Date\"), __jsx(DatePicker, {\n    selected: endDate,\n    onChange: function onChange(date) {\n      return setEndDate(date);\n    },\n    className: \"form-input w-full\",\n    endDate: endDate,\n    minDate: beginDate,\n    selectsStart: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 15\n    }\n  })), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 13\n    }\n  }, __jsx(\"button\", {\n    className: \"px-3 py-2 border border-gray-800 shadow hover:bg-gray-800 hover:text-white\",\n    onClick: function onClick() {\n      return handleFetchQueries();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 15\n    }\n  }, \"Submit\"))), __jsx(\"div\", {\n    className: \"pt-6 mx-12\",\n    ref: function ref(el) {\n      return toPrint = el;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 11\n    }\n  }, __jsx(\"h6\", {\n    className: \"font-semibold text-xl text-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 13\n    }\n  }, \"Commodity Ton Totals\"), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 15\n    }\n  }, __jsx(\"span\", {\n    className: \"text-gray-600 text-sm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 17\n    }\n  }, \"Beginning Date: \"), __jsx(\"span\", {\n    className: \"mx-1 text-base text-gray-900\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 17\n    }\n  }, moment(beginDate).isValid() ? moment(beginDate).format(\"MM/DD/YY\") : \"Not Set\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 15\n    }\n  }, __jsx(\"span\", {\n    className: \"text-gray-600 text-sm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 17\n    }\n  }, \"End Date: \"), __jsx(\"span\", {\n    className: \"mx-1 text-base text-gray-900 \",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 17\n    }\n  }, \" \", moment(beginDate).isValid() ? moment(endDate).format(\"MM/DD/YY\") : \"Not Set\"))), __jsx(\"div\", {\n    className: \"pb-24 pt-6\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 13\n    }\n  }, !isFetched ? __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 17\n    }\n  }, \"Choose dates to generate report.\") : isSuccess && !canFetchMore ? __jsx(\"table\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 17\n    }\n  }, __jsx(\"thead\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 19\n    }\n  }, __jsx(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 21\n    }\n  }, __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 23\n    }\n  }, \"Commodity\"), __jsx(\"th\", {\n    className: \"pr-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 23\n    }\n  }, \"Week Number Loads\"), __jsx(\"th\", {\n    className: \"pr-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 23\n    }\n  }, \"Year Number Loads\"), __jsx(\"th\", {\n    className: \"pr-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 23\n    }\n  }, \"Week Avg Tons\"), __jsx(\"th\", {\n    className: \"pr-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 23\n    }\n  }, \" Year Avg Tons\"))), __jsx(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 19\n    }\n  }, totals.map(function (total) {\n    return __jsx(\"tr\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 23\n      }\n    }, __jsx(\"td\", {\n      className: \"px-2 py-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 25\n      }\n    }, total.commodity), __jsx(\"td\", {\n      className: \"px-2 py-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 25\n      }\n    }, \" \", total.weekNumLoads), __jsx(\"td\", {\n      className: \"px-2 py-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 25\n      }\n    }, total.yearNumLoads), __jsx(\"td\", {\n      className: \"px-2 py-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 25\n      }\n    }, total.weekAvgTons.toFixed(2)), __jsx(\"td\", {\n      className: \"px-2 py-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 25\n      }\n    }, total.yearAvgTons.toFixed(2)));\n  }), __jsx(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 21\n    }\n  }, __jsx(\"td\", {\n    className: \"border-t-4 border-gray-600\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 23\n    }\n  }, \"Totals:\"), __jsx(\"td\", {\n    className: \"border-t-4 border-gray-600\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 23\n    }\n  }, console.log(totals), totals.reduce(function (accumulator, cv) {\n    return accumulator + cv.weekNumLoads;\n  }, 0)), __jsx(\"td\", {\n    className: \"border-t-4 border-gray-600\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 23\n    }\n  }, totals.reduce(function (accumulator, cv) {\n    return accumulator + cv.yearNumLoads;\n  }, 0)), __jsx(\"td\", {\n    className: \"border-t-4 border-gray-600\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 23\n    }\n  }, totals.length && computeWeekTotalAvg().toFixed(2)), __jsx(\"td\", {\n    className: \"border-t-4 border-gray-600\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 23\n    }\n  }, totals.length && computeYearTotalAvg().toFixed(2)))), __jsx(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 19\n    }\n  })) : __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 17\n    }\n  }, \"Loading...\"))), __jsx(ReactQueryDevtools, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(CommodityTotals, \"NMGvhY/GsFdWoyBwX90yp/ymXSk=\", false, function () {\n  return [useQueryCache, useQuery, useQuery, useInfiniteQuery];\n});\n\n_c = CommodityTotals;\nexport var __N_SSP = true;\nexport default CommodityTotals;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommodityTotals\");","map":{"version":3,"sources":["/Users/gregleeper/jds/pages/reports/commodity-ton-totals.js"],"names":["API","ReactToPrint","Table","useEffect","useState","useMemo","useRef","DatePicker","computeAvgNetTons","groupBy","moment","Layout","ticketsByDate","contractsByType","listCommoditys","useQuery","useInfiniteQuery","useQueryCache","ReactQueryDevtools","CommodityTotals","cache","toPrint","getQueryData","beginDate","setBeginDate","endDate","setEndDate","tickets","setTickets","ticketsYTD","setTicketsYTD","commodities","setCommodities","totals","setTotals","isInitialLoad","setIsInitialLoad","graphql","query","myCommodities","data","commodityData","variables","limit","filter","contractState","eq","ticketFilter","ticketDate","between","startOf","endOf","contractType","initTicketsYTD","enabled","cacheTime","refetchOnWindowFocus","refetchOnMount","refetchIntervalInBackground","refetchOnReconnect","ytdTicketsData","refetchYTD","refetch","key","nextToken","ticketData","getFetchMore","lastGroup","allGroups","ytdStatus","status","ytdData","ytdError","error","isFetched","ytdIsFetching","isFetching","ytdIsFetchingMore","isFetchingMore","ytdFetchMore","fetchMore","canFetchMore","isSuccess","computeTotals","startBeginDate","endOfEndDate","filteredByWeek","ticket","isSameOrAfter","isSameOrBefore","groupedYTD","contract","commodity","name","grouped","array","map","c","commodityTotal","group","get","console","log","ytdGroup","weekNumLoads","length","yearNumLoads","weekAvgTons","reduce","acc","cv","netTons","yearAvgTons","push","computeWeekTotalAvg","count","t","a","computeYearTotalAvg","items","sort","b","nameA","nameB","compileDataYTD","setQueryData","handleFetchQueries","i","item","flat","columns","Header","accessor","date","el","isValid","format","total","toFixed","accumulator"],"mappings":"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","sourcesContent":["import { API, withSSRContext } from \"aws-amplify\";\nimport ReactToPrint from \"react-to-print\";\nimport Table from \"../../components/table\";\nimport { useEffect, useState, useMemo, useRef } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { computeAvgNetTons, groupBy } from \"../../utils\";\nimport moment from \"moment\";\nimport Layout from \"../../components/layout\";\nimport {\n  ticketsByDate,\n  contractsByType,\n} from \"../../src/graphql/customQueries\";\nimport { listCommoditys } from \"../../src/graphql/queries.ts\";\nimport { useQuery, useInfiniteQuery, useQueryCache } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query-devtools\";\n\nconst CommodityTotals = () => {\n  const cache = useQueryCache();\n  let toPrint = useRef(null);\n  const [beginDate, setBeginDate] = useState(\n    cache.getQueryData(\"cctDates\")\n      ? cache.getQueryData(\"cctDates\").beginDate\n      : null\n  );\n  const [endDate, setEndDate] = useState(\n    cache.getQueryData(\"cctDates\")\n      ? cache.getQueryData(\"cctDates\").endDate\n      : null\n  );\n  const [tickets, setTickets] = useState([]);\n  const [ticketsYTD, setTicketsYTD] = useState([]);\n  const [commodities, setCommodities] = useState([]);\n  const [totals, setTotals] = useState([]);\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\n\n  const { data: commodityData } = useQuery(\"commodities\", async () => {\n    const {\n      data: { listCommoditys: myCommodities },\n    } = await API.graphql({\n      query: listCommoditys,\n    });\n    return myCommodities;\n  });\n\n  // const { data: initTicketsData, refetch, isFetched } = useQuery(\n  //   \"commodityTonTotals\",\n  //   async () => {\n  //     const {\n  //       data: { ticketsByDate: initTickets },\n  //     } = await API.graphql({\n  //       query: listReportTickets,\n  //       variables: {\n  //         limit: 2000,\n  //         filter: {\n  //           ticketDate: {\n  //             between: [\n  //               moment(beginDate).startOf(\"day\"),\n  //               moment(endDate).endOf(\"day\"),\n  //             ],\n  //           },\n  //         },\n  //       },\n  //     });\n  //     return initTickets;\n  //   },\n  //   {\n  //     enabled: false,\n  //     cacheTime: 1000 * 60 * 59,\n  //     refetchOnWindowFocus: false,\n  //     refetchOnMount: false,\n  //     refetchIntervalInBackground: false,\n  //     refetchOnReconnect: true,\n  //     forceFetchOnMount: false,\n  //     keepPreviousData: false,\n  //   }\n  // );\n\n  // const {\n  //   status,\n  //   data: ticketsDataInfinite,\n  //   error,\n  //   isFetching,\n  //   isFetchingMore,\n  //   isSuccess,\n  //   fetchMore,\n  //   canFetchMore,\n  // } = useInfiniteQuery(\n  //   \"commodityTonTotals\",\n  //   async (\n  //     key,\n  //     nextToken = cache.getQueryData(\"commodityTonTotals\").nextToken\n  //   ) => {\n  //     const {\n  //       data: { ticketsByDate: ticketData },\n  //     } = await API.graphql({\n  //       query: listReportTickets,\n  //       variables: {\n  //         limit: 2000,\n  //         filter: {\n  //           ticketDate: {\n  //             between: [\n  //               moment(beginDate).startOf(\"day\"),\n  //               moment(endDate).endOf(\"day\"),\n  //             ],\n  //           },\n  //         },\n  //         nextToken,\n  //       },\n  //     });\n  //     return ticketData;\n  //   },\n  //   {\n  //     enabled: false,\n  //     getFetchMore: (lastGroup, allGroups) => lastGroup.nextToken,\n  //     cacheTime: 1000 * 60 * 60,\n  //     refetchOnWindowFocus: false,\n  //     forceFetchOnMount: false,\n  //     keepPreviousData: false,\n  //   }\n  // );\n\n  const { data: ytdTicketsData, refetch: refetchYTD } = useQuery(\n    \"commodityTonTotalsYTD\",\n    async () => {\n      const {\n        data: { contractsByType: initTicketsYTD },\n      } = await API.graphql({\n        query: contractsByType,\n        variables: {\n          limit: 20,\n          filter: {\n            contractState: { eq: \"ACTIVE\" },\n          },\n          ticketFilter: {\n            ticketDate: {\n              between: [\n                moment().startOf(\"year\"),\n                moment(endDate).endOf(\"date\"),\n              ],\n            },\n          },\n          contractType: \"SALE\",\n        },\n      });\n\n      return initTicketsYTD;\n    },\n    {\n      enabled: false,\n      cacheTime: 1000 * 60 * 59,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchIntervalInBackground: false,\n      refetchOnReconnect: true,\n    }\n  );\n\n  const {\n    status: ytdStatus,\n    data: ytdData,\n    error: ytdError,\n    isFetched,\n    isFetching: ytdIsFetching,\n    isFetchingMore: ytdIsFetchingMore,\n    fetchMore: ytdFetchMore,\n    canFetchMore,\n    isSuccess,\n  } = useInfiniteQuery(\n    \"commodityTonTotalsYTD\",\n    async (\n      key,\n      nextToken = cache.getQueryData(\"commodityTonTotalsYTD\").nextToken\n    ) => {\n      const {\n        data: { contractsByType: ticketData },\n      } = await API.graphql({\n        query: contractsByType,\n        variables: {\n          limit: 20,\n          contractType: \"SALE\",\n          filter: {\n            contractState: { eq: \"ACTIVE\" },\n          },\n          ticketFilter: {\n            ticketDate: {\n              between: [moment().startOf(\"year\"), moment(endDate).endOf(\"day\")],\n            },\n          },\n\n          nextToken,\n        },\n      });\n      return ticketData;\n    },\n    {\n      enabled: false,\n      getFetchMore: (lastGroup, allGroups) => lastGroup.nextToken,\n      cacheTime: 1000 * 60 * 60,\n      refetchOnWindowFocus: false,\n    }\n  );\n\n  const computeTotals = () => {\n    const startBeginDate = moment(beginDate).startOf(\"date\");\n    const endOfEndDate = moment(endDate).endOf(\"date\");\n\n    const filteredByWeek = ticketsYTD.filter(\n      (ticket) =>\n        moment(ticket.ticketDate).isSameOrAfter(startBeginDate) &&\n        moment(ticket.ticketDate).isSameOrBefore(endOfEndDate)\n    );\n\n    const groupedYTD = groupBy(\n      ticketsYTD,\n      (ticket) => ticket.contract.commodity.name\n    );\n    const grouped = groupBy(\n      filteredByWeek,\n      (ticket) => ticket.contract.commodity.name\n    );\n    let array = [];\n    commodities.map((c) => {\n      let commodityTotal = {};\n      const group = grouped.get(c.name);\n      console.log(group);\n      const ytdGroup = groupedYTD.get(c.name);\n      commodityTotal.commodity = c.name;\n\n      commodityTotal.weekNumLoads = group ? group.length : 0;\n      commodityTotal.yearNumLoads = ytdGroup ? ytdGroup.length : 0;\n\n      commodityTotal.weekAvgTons = group\n        ? group.reduce((acc, cv) => acc + cv.netTons, 0) / group.length\n        : 0;\n      commodityTotal.yearAvgTons = ytdGroup\n        ? ytdGroup.reduce((acc, cv) => acc + cv.netTons, 0) / ytdGroup.length\n        : 0;\n\n      array.push(commodityTotal);\n    });\n\n    setTotals(array);\n  };\n\n  const computeWeekTotalAvg = () => {\n    let count = 0;\n    totals.map((t) => {\n      if (t.weekAvgTons) {\n        count++;\n      }\n    });\n    console.log(totals.reduce((a, cv) => a + cv.weekAvgTons, 0));\n    return totals.reduce((a, cv) => a + cv.weekAvgTons, 0) / count;\n  };\n\n  const computeYearTotalAvg = () => {\n    let count = 0;\n    totals.map((t) => {\n      if (t.yearAvgTons) {\n        count++;\n      }\n    });\n    return totals.reduce((a, cv) => a + cv.yearAvgTons, 0) / count;\n  };\n\n  useEffect(() => {\n    if (commodityData) {\n      setCommodities(commodityData.items);\n    }\n  }, [commodityData]);\n\n  useEffect(() => {\n    if (totals.length) {\n      totals.sort((a, b) => {\n        let nameA = a.commodity;\n        let nameB = b.commodity;\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        return 0;\n      });\n    }\n  }, [totals]);\n\n  useEffect(() => {\n    if (ytdTicketsData) {\n      ytdFetchMore();\n    }\n    if (ytdTicketsData && canFetchMore && !ytdIsFetchingMore) {\n      ytdFetchMore();\n    }\n    if (ytdTicketsData && ytdTicketsData.length && !canFetchMore) {\n      compileDataYTD();\n    }\n  }, [ytdTicketsData]);\n\n  // useEffect(() => {\n  //   if (initTicketsData) {\n  //     fetchMore();\n  //   }\n  //   if (initTicketsData && canFetchMore && !isFetchingMore) {\n  //     fetchMore();\n  //   }\n\n  //   if (initTicketsData && initTicketsData.length && !canFetchMore) {\n  //     compileData();\n  //   }\n  // }, [initTicketsData]);\n\n  useEffect(() => {\n    if (ticketsYTD.length > 0) {\n      computeTotals();\n      cache.setQueryData(\"cctDates\", {\n        beginDate: beginDate,\n        endDate: endDate,\n      });\n    }\n  }, [ticketsYTD]);\n\n  const handleFetchQueries = () => {\n    setTickets([]);\n    setTicketsYTD([]);\n    setTotals([]);\n\n    refetchYTD();\n  };\n\n  // const compileData = () => {\n  //   if (isInitialLoad) {\n  //     let array = [...tickets];\n\n  //     ticketsDataInfinite &&\n  //       ticketsDataInfinite.map((group, i) => {\n  //         group.items.map((item) => array.push(item));\n  //       });\n  //     setTickets(array);\n  //     setIsInitialLoad(false);\n  //   } else {\n  //     let array = [];\n  //     ticketsDataInfinite &&\n  //       ticketsDataInfinite.map((group, i) => {\n  //         group.items.map((item) => array.push(item));\n  //       });\n  //     setTickets(array);\n  //   }\n  // };\n\n  const compileDataYTD = () => {\n    if (isInitialLoad) {\n      let array = [...ticketsYTD];\n\n      ytdData &&\n        ytdData.map((group, i) => {\n          group.items.map((item) => {\n            item.tickets.items.length ? array.push(item.tickets.items) : null;\n          });\n        });\n\n      setTicketsYTD(array.flat());\n\n      setIsInitialLoad(false);\n    } else {\n      let array = [];\n      ytdData &&\n        ytdData.map((group, i) => {\n          group.items.map((item) => {\n            item.tickets.items.length ? array.push(item.tickets.items) : null;\n          });\n        });\n      setTicketsYTD(array.flat());\n    }\n  };\n  console.log(ticketsYTD);\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Commodity\",\n        accessor: \"commodity\",\n      },\n      {\n        Header: \"Weekly Number of Loads\",\n        accessor: \"weekNumLoads\",\n      },\n      {\n        Header: \"Year Number of Loads\",\n        accessor: \"yearNumLoads\",\n      },\n      {\n        Header: \"Week Avg Tons\",\n        accessor: \"weekAvgTons\",\n      },\n      {\n        Header: \"YTD Avg Tons\",\n        accessor: \"yearAvgTons\",\n      },\n    ],\n    []\n  );\n\n  return (\n    <Layout>\n      <div className=\"px-12\">\n        <div className=\"text-center w-1/2 mx-auto py-6 text-2xl font-bold\">\n          <h3>Commodity Ton Totals</h3>\n        </div>\n        <ReactToPrint\n          trigger={() => (\n            <a\n              href=\"#\"\n              className=\"px-3 py-2 border border-gray-800 shadow hover:bg-gray-800 hover:text-white\"\n            >\n              Print Report\n            </a>\n          )}\n          content={() => toPrint}\n        />\n        <div className=\"w-7/12 mx-auto\">\n          <div className=\"flex justify-between items-end w-1/2 mx-auto\">\n            <div>\n              <span>Begin Date</span>\n              <DatePicker\n                selected={beginDate}\n                onChange={(date) => setBeginDate(date)}\n                className=\"form-input w-full\"\n                startDate={beginDate}\n                selectsStart\n              />\n            </div>\n            <div>\n              <span>End Date</span>\n              <DatePicker\n                selected={endDate}\n                onChange={(date) => setEndDate(date)}\n                className=\"form-input w-full\"\n                endDate={endDate}\n                minDate={beginDate}\n                selectsStart\n              />\n            </div>\n            <div>\n              <button\n                className=\"px-3 py-2 border border-gray-800 shadow hover:bg-gray-800 hover:text-white\"\n                onClick={() => handleFetchQueries()}\n              >\n                Submit\n              </button>\n            </div>\n          </div>\n\n          <div className=\"pt-6 mx-12\" ref={(el) => (toPrint = el)}>\n            <h6 className=\"font-semibold text-xl text-center\">\n              Commodity Ton Totals\n            </h6>\n            <div>\n              <div>\n                <span className=\"text-gray-600 text-sm\">Beginning Date: </span>\n                <span className=\"mx-1 text-base text-gray-900\">\n                  {moment(beginDate).isValid()\n                    ? moment(beginDate).format(\"MM/DD/YY\")\n                    : `Not Set`}\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-600 text-sm\">End Date: </span>\n                <span className=\"mx-1 text-base text-gray-900 \">\n                  {\" \"}\n                  {moment(beginDate).isValid()\n                    ? moment(endDate).format(\"MM/DD/YY\")\n                    : `Not Set`}\n                </span>\n              </div>\n            </div>\n            <div className=\"pb-24 pt-6\">\n              {!isFetched ? (\n                <p>Choose dates to generate report.</p>\n              ) : isSuccess && !canFetchMore ? (\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Commodity</th>\n                      <th className=\"pr-2\">Week Number Loads</th>\n                      <th className=\"pr-2\">Year Number Loads</th>\n                      <th className=\"pr-2\">Week Avg Tons</th>\n                      <th className=\"pr-2\"> Year Avg Tons</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {totals.map((total) => (\n                      <tr>\n                        <td className=\"px-2 py-1\">{total.commodity}</td>\n                        <td className=\"px-2 py-1\"> {total.weekNumLoads}</td>\n                        <td className=\"px-2 py-1\">{total.yearNumLoads}</td>\n                        <td className=\"px-2 py-1\">\n                          {total.weekAvgTons.toFixed(2)}\n                        </td>\n                        <td className=\"px-2 py-1\">\n                          {total.yearAvgTons.toFixed(2)}\n                        </td>\n                      </tr>\n                    ))}\n                    <tr>\n                      <td className=\"border-t-4 border-gray-600\">Totals:</td>\n                      <td className=\"border-t-4 border-gray-600\">\n                        {console.log(totals)}\n\n                        {totals.reduce(\n                          (accumulator, cv) => accumulator + cv.weekNumLoads,\n                          0\n                        )}\n                      </td>\n                      <td className=\"border-t-4 border-gray-600\">\n                        {totals.reduce(\n                          (accumulator, cv) => accumulator + cv.yearNumLoads,\n                          0\n                        )}\n                      </td>\n                      <td className=\"border-t-4 border-gray-600\">\n                        {totals.length && computeWeekTotalAvg().toFixed(2)}\n                      </td>\n                      <td className=\"border-t-4 border-gray-600\">\n                        {totals.length && computeYearTotalAvg().toFixed(2)}\n                      </td>\n                    </tr>\n                  </tbody>\n                  <tbody></tbody>\n                </table>\n              ) : (\n                <p>Loading...</p>\n              )}\n            </div>\n          </div>\n          <ReactQueryDevtools />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport async function getServerSideProps({ req, res }) {\n  const { Auth } = withSSRContext({ req });\n  try {\n    const user = await Auth.currentAuthenticatedUser();\n\n    return {\n      props: {\n        authenticated: true,\n        username: user.username,\n      },\n    };\n  } catch (err) {\n    res.writeHead(302, { Location: \"/sign-in\" });\n    res.end();\n    return {\n      props: {\n        authenticated: false,\n      },\n    };\n  }\n}\n\nexport default CommodityTotals;\n"]},"metadata":{},"sourceType":"module"}