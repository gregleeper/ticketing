{"ast":null,"code":"var _jsxFileName = \"/Users/gregleeper/jds/components/formikSelectTickets.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Select from \"react-select\";\nexport function FormikSelect({\n  options,\n  field,\n  form,\n  handleChange\n}) {\n  return __jsx(Select, {\n    instanceId: 1,\n    id: field.name,\n    className: \" w-full -mx-2\",\n    autoComplete: \"on\",\n    name: field.name,\n    onBlur: field.onBlur,\n    onChange: ({\n      value\n    }) => {\n      form.setFieldValue(field.name, value);\n      handleChange(value);\n    },\n    options: options,\n    value: options ? options.find(option => option.value === field.value) : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/gregleeper/jds/components/formikSelectTickets.js"],"names":["Select","FormikSelect","options","field","form","handleChange","name","onBlur","value","setFieldValue","find","option"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,cAAnB;AAEA,OAAO,SAASC,YAAT,CAAsB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA,IAAlB;AAAwBC,EAAAA;AAAxB,CAAtB,EAA8D;AACnE,SACE,MAAC,MAAD;AACE,IAAA,UAAU,EAAE,CADd;AAEE,IAAA,EAAE,EAAEF,KAAK,CAACG,IAFZ;AAGE,IAAA,SAAS,EAAC,eAHZ;AAIE,IAAA,YAAY,EAAC,IAJf;AAKE,IAAA,IAAI,EAAEH,KAAK,CAACG,IALd;AAME,IAAA,MAAM,EAAEH,KAAK,CAACI,MANhB;AAOE,IAAA,QAAQ,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAe;AACvBJ,MAAAA,IAAI,CAACK,aAAL,CAAmBN,KAAK,CAACG,IAAzB,EAA+BE,KAA/B;AACAH,MAAAA,YAAY,CAACG,KAAD,CAAZ;AACD,KAVH;AAWE,IAAA,OAAO,EAAEN,OAXX;AAYE,IAAA,KAAK,EACHA,OAAO,GAAGA,OAAO,CAACQ,IAAR,CAAcC,MAAD,IAAYA,MAAM,CAACH,KAAP,KAAiBL,KAAK,CAACK,KAAhD,CAAH,GAA4D,EAbvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAkBD","sourcesContent":["import Select from \"react-select\";\n\nexport function FormikSelect({ options, field, form, handleChange }) {\n  return (\n    <Select\n      instanceId={1}\n      id={field.name}\n      className=\" w-full -mx-2\"\n      autoComplete=\"on\"\n      name={field.name}\n      onBlur={field.onBlur}\n      onChange={({ value }) => {\n        form.setFieldValue(field.name, value);\n        handleChange(value);\n      }}\n      options={options}\n      value={\n        options ? options.find((option) => option.value === field.value) : \"\"\n      }\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}