{"ast":null,"code":"export var getContract =\n/* GraphQL */\n\"\\n  query GetContract($id: ID!, $ticketFilter: ModelTicketFilterInput) {\\n    getContract(id: $id) {\\n      id\\n      contractNumber\\n      contractType\\n      contractState\\n      vendorId\\n      commodityId\\n      contractTo {\\n        id\\n        vendorNumber\\n        companyReportName\\n        companyListingName\\n        address1\\n        address2\\n        city\\n        state\\n        zipCode\\n        telephoneNum\\n        attention\\n        prepayment\\n        prepaymentAmt\\n        createdAt\\n        updatedAt\\n      }\\n      quantity\\n      contractPrice\\n      salePrice\\n      terms\\n      weights\\n      basis\\n      remarks\\n      beginDate\\n      endDate\\n      dateSigned\\n      purchasedFrom\\n      tickets(filter: $ticketFilter, limit: 2499) {\\n        items {\\n          id\\n          contractId\\n          invoiceId\\n          settlementId\\n          paymentId\\n          correspondingContractId\\n          type\\n          ticketDate\\n          fieldNum\\n          baleCount\\n          ticketNumber\\n          ladingNumber\\n          driver\\n          truckNumber\\n          grossWeight\\n          tareWeight\\n          netWeight\\n          netTons\\n          createdAt\\n          updatedAt\\n        }\\n        nextToken\\n      }\\n      payments {\\n        items {\\n          id\\n          type\\n          tFileNumber\\n          contractId\\n          checkNumber\\n          date\\n          amount\\n          totalPounds\\n          invoiceId\\n          settlementId\\n          tonsCredit\\n          overage\\n          underage\\n          paymentType\\n          createdAt\\n          updatedAt\\n        }\\n        nextToken\\n      }\\n      soldTo\\n      commodity {\\n        id\\n        name\\n        calculateCode\\n        billingCode\\n        poundsPerBushel\\n        contracts {\\n          nextToken\\n        }\\n        createdAt\\n        updatedAt\\n      }\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n\";\nexport var getPayment =\n/* GraphQL */\n\"\\n  query GetPayment($id: ID!, $ticketFilter: ModelTicketFilterInput) {\\n    getPayment(id: $id) {\\n      id\\n      type\\n      tFileNumber\\n      contractId\\n      contract {\\n        id\\n        contractNumber\\n        contractType\\n        contractState\\n        vendorId\\n        commodityId\\n        contractTo {\\n          id\\n          vendorNumber\\n          companyReportName\\n          companyListingName\\n          address1\\n          address2\\n          city\\n          state\\n          zipCode\\n          telephoneNum\\n          attention\\n          prepayment\\n          prepaymentAmt\\n          createdAt\\n          updatedAt\\n        }\\n        quantity\\n        contractPrice\\n        salePrice\\n        terms\\n        weights\\n        basis\\n        remarks\\n        beginDate\\n        endDate\\n        dateSigned\\n        purchasedFrom\\n        tickets {\\n          nextToken\\n        }\\n        payments {\\n          nextToken\\n        }\\n        soldTo\\n        commodity {\\n          id\\n          name\\n          calculateCode\\n          billingCode\\n          poundsPerBushel\\n          createdAt\\n          updatedAt\\n        }\\n        createdAt\\n        updatedAt\\n      }\\n      tickets(filter: $ticketFilter, limit: 2499) {\\n        items {\\n          id\\n          contractId\\n          invoiceId\\n          settlementId\\n          paymentId\\n          correspondingContractId\\n          type\\n          ticketDate\\n          fieldNum\\n          baleCount\\n          ticketNumber\\n          ladingNumber\\n          driver\\n          truckNumber\\n          grossWeight\\n          tareWeight\\n          netWeight\\n          netTons\\n          createdAt\\n          updatedAt\\n        }\\n        nextToken\\n      }\\n      checkNumber\\n      date\\n      amount\\n      totalPounds\\n      invoiceId\\n      settlementId\\n      tonsCredit\\n      overage\\n      underage\\n      paymentType\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n\";\nexport var listReportTickets =\n/* GraphQL */\n\"\\n  query ListTickets(\\n    $filter: ModelTicketFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    listTickets(filter: $filter, limit: $limit, nextToken: $nextToken) {\\n      items {\\n        id\\n        contractId\\n        correspondingContractId\\n        type\\n        contract {\\n          id\\n          contractNumber\\n          contractType\\n\\n          contractState\\n          contractTo {\\n            companyReportName\\n            id\\n          }\\n          commodity {\\n            name\\n            id\\n          }\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        corresondingContract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n\\n          salePrice\\n          beginDate\\n          endDate\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        ticketDate\\n        fieldNum\\n        baleCount\\n        ticketNumber\\n        ladingNumber\\n        driver\\n        truckNumber\\n        grossWeight\\n        tareWeight\\n        netWeight\\n        netTons\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";\nexport var settlementsSorted =\n/* GraphQL */\n\"\\n  query SettlementsSorted(\\n    $type: String\\n    $dueDate: ModelStringKeyConditionInput\\n    $sortDirection: ModelSortDirection\\n    $filter: ModelSettlementFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    settlementsSorted(\\n      type: $type\\n      dueDate: $dueDate\\n      sortDirection: $sortDirection\\n      filter: $filter\\n      limit: $limit\\n      nextToken: $nextToken\\n    ) {\\n      items {\\n        id\\n        settlementNumber\\n        tickets {\\n          items {\\n            id\\n            contract {\\n              id\\n              contractNumber\\n            }\\n          }\\n        }\\n        vendorId\\n        vendor {\\n          id\\n          vendorNumber\\n          companyReportName\\n          companyListingName\\n          address1\\n          address2\\n          city\\n          state\\n          zipCode\\n          telephoneNum\\n          attention\\n          prepayment\\n          prepaymentAmt\\n          createdAt\\n          updatedAt\\n        }\\n        contractId\\n        contract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        amountOwed\\n        beginDate\\n        endDate\\n        type\\n        dueDate\\n        paymentId\\n        isPaid\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";\nexport var invoicesSorted =\n/* GraphQL */\n\"\\n  query InvoicesSorted(\\n    $type: String\\n    $dueDate: ModelStringKeyConditionInput\\n    $sortDirection: ModelSortDirection\\n    $filter: ModelInvoiceFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    invoicesSorted(\\n      type: $type\\n      dueDate: $dueDate\\n      sortDirection: $sortDirection\\n      filter: $filter\\n      limit: $limit\\n      nextToken: $nextToken\\n    ) {\\n      items {\\n        id\\n        invoiceNumber\\n        tickets {\\n          items {\\n            id\\n            contract {\\n              id\\n              contractNumber\\n            }\\n          }\\n        }\\n        contract {\\n          contractNumber\\n        }\\n        vendorId\\n        vendor {\\n          id\\n          vendorNumber\\n          companyReportName\\n          companyListingName\\n          address1\\n          address2\\n          city\\n          state\\n          zipCode\\n          telephoneNum\\n          attention\\n          prepayment\\n          prepaymentAmt\\n          createdAt\\n          updatedAt\\n        }\\n        amountOwed\\n        type\\n        dueDate\\n        paymentId\\n        isPaid\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";\nexport var getInvoice =\n/* GraphQL */\n\"\\n  query GetInvoice($id: ID!) {\\n    getInvoice(id: $id) {\\n      id\\n      beginDate\\n      invoiceNumber\\n      contractId\\n      contract {\\n        id\\n        contractNumber\\n        contractType\\n        contractState\\n        vendorId\\n        commodityId\\n        contractTo {\\n          id\\n          vendorNumber\\n          companyReportName\\n          companyListingName\\n          address1\\n          address2\\n          city\\n          state\\n          zipCode\\n          telephoneNum\\n          attention\\n          prepayment\\n          prepaymentAmt\\n          createdAt\\n          updatedAt\\n        }\\n        quantity\\n        contractPrice\\n        salePrice\\n        terms\\n        weights\\n        basis\\n        remarks\\n        beginDate\\n        endDate\\n        dateSigned\\n        purchasedFrom\\n        tickets {\\n          nextToken\\n        }\\n        soldTo\\n        commodity {\\n          id\\n          name\\n          calculateCode\\n          billingCode\\n          poundsPerBushel\\n          createdAt\\n          updatedAt\\n        }\\n        createdAt\\n        updatedAt\\n      }\\n      endDate\\n      tickets {\\n        items {\\n          id\\n          contractId\\n          invoiceId\\n          correspondingContractId\\n          contract {\\n            contractNumber\\n            salePrice\\n            commodity {\\n              name\\n            }\\n          }\\n          type\\n          ticketDate\\n          fieldNum\\n          baleCount\\n          ticketNumber\\n          ladingNumber\\n          driver\\n          truckNumber\\n          grossWeight\\n          tareWeight\\n          netWeight\\n          netTons\\n          createdAt\\n          updatedAt\\n        }\\n        nextToken\\n      }\\n      vendorId\\n      vendor {\\n        id\\n        vendorNumber\\n        companyReportName\\n        companyListingName\\n        address1\\n        address2\\n        city\\n        state\\n        zipCode\\n        telephoneNum\\n        attention\\n        prepayment\\n        prepaymentAmt\\n        createdAt\\n        updatedAt\\n      }\\n      amountOwed\\n      type\\n      dueDate\\n      paymentId\\n      isPaid\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n\";\nexport var listTickets =\n/* GraphQL */\n\"\\n  query ListTickets(\\n    $filter: ModelTicketFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    listTickets(filter: $filter, limit: $limit, nextToken: $nextToken) {\\n      items {\\n        id\\n        contractId\\n        invoiceId\\n        correspondingContractId\\n        type\\n        contract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          contractTo {\\n            companyReportName\\n          }\\n\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        corresondingContract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        ticketDate\\n        fieldNum\\n        baleCount\\n        ticketNumber\\n        ladingNumber\\n        driver\\n        truckNumber\\n        grossWeight\\n        tareWeight\\n        netWeight\\n        netTons\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";\nexport var ticketsByDate =\n/* GraphQL */\n\"\\n  query TicketsByDate(\\n    $type: String\\n    $ticketDate: ModelStringKeyConditionInput\\n    $sortDirection: ModelSortDirection\\n    $filter: ModelTicketFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    ticketsByDate(\\n      type: $type\\n      ticketDate: $ticketDate\\n      sortDirection: $sortDirection\\n      filter: $filter\\n      limit: $limit\\n      nextToken: $nextToken\\n    ) {\\n      items {\\n        id\\n        contractId\\n        invoiceId\\n        correspondingContractId\\n        type\\n        contract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          contractTo {\\n            companyReportName\\n          }\\n          vendorId\\n          commodityId\\n          commodity {\\n            name\\n          }\\n          quantity\\n          contractPrice\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        corresondingContract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        ticketDate\\n        fieldNum\\n        baleCount\\n        ticketNumber\\n        ladingNumber\\n        paymentId\\n        driver\\n        truckNumber\\n        grossWeight\\n        tareWeight\\n        netWeight\\n        netTons\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";\nexport var paymentsSorted =\n/* GraphQL */\n\"\\n  query PaymentsSorted(\\n    $type: String\\n    $date: ModelStringKeyConditionInput\\n    $sortDirection: ModelSortDirection\\n    $filter: ModelPaymentFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    paymentsSorted(\\n      type: $type\\n      date: $date\\n      sortDirection: $sortDirection\\n      filter: $filter\\n      limit: $limit\\n      nextToken: $nextToken\\n    ) {\\n      items {\\n        id\\n        type\\n        tFileNumber\\n        contractId\\n        contract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          contractTo {\\n            companyReportName\\n          }\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        tickets {\\n          items {\\n            id\\n            ticketNumber\\n            netTons\\n            netWeight\\n            truckNumber\\n          }\\n        }\\n        checkNumber\\n        date\\n        amount\\n        totalPounds\\n        invoiceId\\n        settlementId\\n        tonsCredit\\n        overage\\n        underage\\n        paymentType\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";\nexport var contractsByType =\n/* GraphQL */\n\"\\n  query ContractsByType(\\n    $contractType: ContractType\\n    $endDate: ModelStringKeyConditionInput\\n    $sortDirection: ModelSortDirection\\n    $filter: ModelContractFilterInput\\n    $ticketFilter: ModelTicketFilterInput\\n    $paymentDate: ModelStringKeyConditionInput\\n    $paymentFilter: ModelPaymentFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    contractsByType(\\n      contractType: $contractType\\n      endDate: $endDate\\n      sortDirection: $sortDirection\\n      filter: $filter\\n      limit: $limit\\n      nextToken: $nextToken\\n    ) {\\n      items {\\n        id\\n        contractNumber\\n        contractType\\n        contractState\\n        vendorId\\n        commodityId\\n        contractTo {\\n          id\\n          vendorNumber\\n          companyReportName\\n          companyListingName\\n          address1\\n          address2\\n          city\\n          state\\n          zipCode\\n          telephoneNum\\n          attention\\n          prepayment\\n          prepaymentAmt\\n          createdAt\\n          updatedAt\\n        }\\n        quantity\\n        contractPrice\\n        salePrice\\n        terms\\n        weights\\n        basis\\n        remarks\\n        beginDate\\n        endDate\\n        dateSigned\\n        purchasedFrom\\n        payments(date: $paymentDate, filter: $paymentFilter, limit: 3000) {\\n          items {\\n            id\\n            type\\n            tFileNumber\\n            contractId\\n            checkNumber\\n            date\\n            amount\\n            totalPounds\\n            invoiceId\\n            settlementId\\n            tickets(limit: 2000) {\\n              items {\\n                id\\n                ticketDate\\n                netTons\\n                netWeight\\n                tareWeight\\n                paymentId\\n                ticketNumber\\n                updatedAt\\n                invoiceId\\n              }\\n            }\\n            tonsCredit\\n            overage\\n            underage\\n            paymentType\\n            createdAt\\n            updatedAt\\n          }\\n          nextToken\\n        }\\n        tickets(filter: $ticketFilter, limit: 2000) {\\n          items {\\n            id\\n            ticketDate\\n\\n            netTons\\n            netWeight\\n            tareWeight\\n            paymentId\\n            ticketNumber\\n            updatedAt\\n            invoiceId\\n            contract {\\n              id\\n              contractNumber\\n              contractType\\n              contractState\\n              contractTo {\\n                companyReportName\\n              }\\n              vendorId\\n              commodityId\\n              commodity {\\n                name\\n              }\\n              quantity\\n              contractPrice\\n              salePrice\\n              terms\\n              weights\\n              basis\\n              remarks\\n              beginDate\\n              endDate\\n              dateSigned\\n              purchasedFrom\\n              soldTo\\n              createdAt\\n              updatedAt\\n            }\\n            corresondingContract {\\n              id\\n              contractNumber\\n              contractType\\n              contractState\\n              vendorId\\n              commodityId\\n              quantity\\n              contractPrice\\n              salePrice\\n              terms\\n              weights\\n              basis\\n              remarks\\n              beginDate\\n              endDate\\n              dateSigned\\n              purchasedFrom\\n              soldTo\\n              createdAt\\n              updatedAt\\n            }\\n          }\\n          nextToken\\n        }\\n        soldTo\\n        commodity {\\n          id\\n          name\\n          calculateCode\\n          billingCode\\n          poundsPerBushel\\n          createdAt\\n          updatedAt\\n        }\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";\nexport var invoicesByContract =\n/* GraphQL */\n\"\\n  query InvoicesByContract(\\n    $contractId: ID\\n    $dueDate: ModelStringKeyConditionInput\\n    $sortDirection: ModelSortDirection\\n    $filter: ModelInvoiceFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    invoicesByContract(\\n      contractId: $contractId\\n      dueDate: $dueDate\\n      sortDirection: $sortDirection\\n      filter: $filter\\n      limit: $limit\\n      nextToken: $nextToken\\n    ) {\\n      items {\\n        id\\n        tickets {\\n          items {\\n            id\\n            ticketDate\\n            netTons\\n            netWeight\\n            tareWeight\\n            ticketNumber\\n            updatedAt\\n            invoiceId\\n          }\\n          nextToken\\n        }\\n        vendorId\\n        invoiceNumber\\n        vendor {\\n          id\\n          vendorNumber\\n          companyReportName\\n          companyListingName\\n          address1\\n          address2\\n          city\\n          state\\n          zipCode\\n          telephoneNum\\n          attention\\n          prepayment\\n          prepaymentAmt\\n          createdAt\\n          updatedAt\\n        }\\n        contractId\\n\\n        contract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        amountOwed\\n        beginDate\\n        endDate\\n        type\\n        dueDate\\n        paymentId\\n        isPaid\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";\nexport var listContracts =\n/* GraphQL */\n\"\\n  query ListContracts(\\n    $filter: ModelContractFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    listContracts(filter: $filter, limit: $limit, nextToken: $nextToken) {\\n      items {\\n        id\\n        contractNumber\\n        contractType\\n        contractState\\n        vendorId\\n        commodityId\\n        contractTo {\\n          id\\n          vendorNumber\\n          companyReportName\\n          companyListingName\\n          address1\\n          address2\\n          city\\n          state\\n          zipCode\\n          telephoneNum\\n          attention\\n          prepayment\\n          prepaymentAmt\\n          createdAt\\n          updatedAt\\n        }\\n        quantity\\n        contractPrice\\n        salePrice\\n        terms\\n        weights\\n        basis\\n        remarks\\n        beginDate\\n        endDate\\n        dateSigned\\n        purchasedFrom\\n        soldTo\\n        commodity {\\n          id\\n          name\\n          calculateCode\\n          billingCode\\n          poundsPerBushel\\n          createdAt\\n          updatedAt\\n        }\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";\nexport var getContractAndTickets =\n/* GraphQL */\n\"\\n  query GetContractAndTickets(\\n    $id: ID!\\n    $limit: Int\\n    $sortDirection: ModelSortDirection\\n  ) {\\n    getContract(id: $id) {\\n      id\\n      contractNumber\\n      contractType\\n      contractState\\n      vendorId\\n      commodityId\\n      contractTo {\\n        id\\n        vendorNumber\\n        companyReportName\\n        companyListingName\\n        address1\\n        address2\\n        city\\n        state\\n        zipCode\\n        telephoneNum\\n        attention\\n        prepayment\\n        prepaymentAmt\\n        createdAt\\n        updatedAt\\n      }\\n      quantity\\n      contractPrice\\n      salePrice\\n      terms\\n      weights\\n      basis\\n      remarks\\n      beginDate\\n      endDate\\n      dateSigned\\n      purchasedFrom\\n      soldTo\\n      commodity {\\n        id\\n        name\\n        calculateCode\\n        billingCode\\n        poundsPerBushel\\n        contracts {\\n          nextToken\\n        }\\n        createdAt\\n        updatedAt\\n      }\\n      createdAt\\n      updatedAt\\n    }\\n    ticketsByContract(\\n      contractId: $id\\n      limit: $limit\\n      sortDirection: $sortDirection\\n    ) {\\n      items {\\n        id\\n        invoiceId\\n        ticketDate\\n        netTons\\n        netWeight\\n\\n        fieldNum\\n        fieldNum\\n        ticketNumber\\n        paymentId\\n        contractId\\n        correspondingContractId\\n        contract {\\n          contractNumber\\n          contractTo {\\n            companyReportName\\n          }\\n        }\\n        corresondingContract {\\n          contractNumber\\n          id\\n        }\\n      }\\n    }\\n  }\\n\";\nexport var settlementsByContract =\n/* GraphQL */\n\"\\n  query SettlementsByContract(\\n    $contractId: ID\\n    $dueDate: ModelStringKeyConditionInput\\n    $sortDirection: ModelSortDirection\\n    $filter: ModelSettlementFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    settlementsByContract(\\n      contractId: $contractId\\n      dueDate: $dueDate\\n      sortDirection: $sortDirection\\n      filter: $filter\\n      limit: $limit\\n      nextToken: $nextToken\\n    ) {\\n      items {\\n        id\\n        settlementNumber\\n        tickets {\\n          items {\\n            id\\n            ticketDate\\n            contract {\\n              contractNumber\\n            }\\n            netTons\\n            netWeight\\n            tareWeight\\n            ticketNumber\\n            updatedAt\\n            invoiceId\\n          }\\n          nextToken\\n        }\\n        vendorId\\n        vendor {\\n          id\\n          vendorNumber\\n          companyReportName\\n          companyListingName\\n          address1\\n          address2\\n          city\\n          state\\n          zipCode\\n          telephoneNum\\n          attention\\n          prepayment\\n          prepaymentAmt\\n          createdAt\\n          updatedAt\\n        }\\n        contractId\\n        contract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        amountOwed\\n        beginDate\\n        endDate\\n        type\\n        dueDate\\n        paymentId\\n        isPaid\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";\nexport var getSettlement =\n/* GraphQL */\n\"\\n  query GetSettlement($id: ID!) {\\n    getSettlement(id: $id) {\\n      id\\n      settlementNumber\\n      tickets {\\n        items {\\n          id\\n          contractId\\n          invoiceId\\n          contract {\\n            contractNumber\\n            commodity {\\n              name\\n            }\\n            contractPrice\\n          }\\n\\n          settlementId\\n          correspondingContractId\\n          type\\n          ticketDate\\n          fieldNum\\n          baleCount\\n          ticketNumber\\n          ladingNumber\\n          driver\\n          truckNumber\\n          grossWeight\\n          tareWeight\\n          netWeight\\n          netTons\\n          createdAt\\n          updatedAt\\n        }\\n        nextToken\\n      }\\n      vendorId\\n      vendor {\\n        id\\n        vendorNumber\\n        companyReportName\\n        companyListingName\\n        address1\\n        address2\\n        city\\n        state\\n        zipCode\\n        telephoneNum\\n        attention\\n        prepayment\\n        prepaymentAmt\\n        createdAt\\n        updatedAt\\n      }\\n      contractId\\n      contract {\\n        id\\n        contractNumber\\n        contractType\\n        contractState\\n        vendorId\\n        commodityId\\n        contractTo {\\n          id\\n          vendorNumber\\n          companyReportName\\n          companyListingName\\n          address1\\n          address2\\n          city\\n          state\\n          zipCode\\n          telephoneNum\\n          attention\\n          prepayment\\n          prepaymentAmt\\n          createdAt\\n          updatedAt\\n        }\\n        quantity\\n        contractPrice\\n        salePrice\\n        terms\\n        weights\\n        basis\\n        remarks\\n        beginDate\\n        endDate\\n        dateSigned\\n        purchasedFrom\\n        tickets {\\n          nextToken\\n        }\\n        soldTo\\n        commodity {\\n          id\\n          name\\n          calculateCode\\n          billingCode\\n          poundsPerBushel\\n          createdAt\\n          updatedAt\\n        }\\n        createdAt\\n        updatedAt\\n      }\\n      amountOwed\\n      beginDate\\n      endDate\\n      type\\n      dueDate\\n      paymentId\\n      isPaid\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n\";\nexport var ticketsByContract =\n/* GraphQL */\n\"\\n  query TicketsByContract(\\n    $contractId: ID\\n    $ticketDate: ModelStringKeyConditionInput\\n    $sortDirection: ModelSortDirection\\n    $filter: ModelTicketFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    ticketsByContract(\\n      contractId: $contractId\\n      ticketDate: $ticketDate\\n      sortDirection: $sortDirection\\n      filter: $filter\\n      limit: $limit\\n      nextToken: $nextToken\\n    ) {\\n      items {\\n        id\\n        contractId\\n        invoiceId\\n        settlementId\\n        correspondingContractId\\n        type\\n        contract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n          contractTo {\\n            companyReportName\\n          }\\n          commodity {\\n            name\\n          }\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        corresondingContract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        ticketDate\\n        fieldNum\\n        baleCount\\n        ticketNumber\\n        ladingNumber\\n        driver\\n        truckNumber\\n        grossWeight\\n        tareWeight\\n        netWeight\\n        netTons\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";\nexport var paymentsByContract =\n/* GraphQL */\n\"\\n  query PaymentsByContract(\\n    $contractId: ID\\n    $date: ModelStringKeyConditionInput\\n    $sortDirection: ModelSortDirection\\n    $filter: ModelPaymentFilterInput\\n    $limit: Int\\n    $nextToken: String\\n  ) {\\n    paymentsByContract(\\n      contractId: $contractId\\n      date: $date\\n      sortDirection: $sortDirection\\n      filter: $filter\\n      limit: $limit\\n      nextToken: $nextToken\\n    ) {\\n      items {\\n        id\\n        type\\n        tFileNumber\\n        contractId\\n        overage\\n        underage\\n        contract {\\n          id\\n          contractNumber\\n          contractType\\n          contractState\\n          vendorId\\n          commodityId\\n          quantity\\n          contractPrice\\n          salePrice\\n          terms\\n          weights\\n          basis\\n          remarks\\n          beginDate\\n          endDate\\n          dateSigned\\n          purchasedFrom\\n          soldTo\\n          createdAt\\n          updatedAt\\n        }\\n        tickets {\\n          items {\\n            ticketNumber\\n            netTons\\n            netWeight\\n            id\\n            ticketDate\\n          }\\n          nextToken\\n        }\\n        checkNumber\\n        date\\n        amount\\n        totalPounds\\n        invoiceId\\n        settlementId\\n        tonsCredit\\n        paymentType\\n        createdAt\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\";","map":{"version":3,"sources":["/Users/gregleeper/jds/src/graphql/customQueries.js"],"names":["getContract","getPayment","listReportTickets","settlementsSorted","invoicesSorted","getInvoice","listTickets","ticketsByDate","paymentsSorted","contractsByType","invoicesByContract","listContracts","getContractAndTickets","settlementsByContract","getSettlement","ticketsByContract","paymentsByContract"],"mappings":"AAAA,OAAO,IAAMA,WAAW;AAAG;AAAH,04DAAjB;AAsGP,OAAO,IAAMC,UAAU;AAAG;AAAH,u6DAAhB;AAsGP,OAAO,IAAMC,iBAAiB;AAAG;AAAH,sgDAAvB;AAgFP,OAAO,IAAMC,iBAAiB;AAAG;AAAH,ioDAAvB;AAqFP,OAAO,IAAMC,cAAc;AAAG;AAAH,srCAApB;AA+DP,OAAO,IAAMC,UAAU;AAAG;AAAH,opEAAhB;AAsHP,OAAO,IAAMC,WAAW;AAAG;AAAH,iiDAAjB;AAiFP,OAAO,IAAMC,aAAa;AAAG;AAAH,q0DAAnB;AA6FP,OAAO,IAAMC,cAAc;AAAG;AAAH,q5CAApB;AA0EP,OAAO,IAAMC,eAAe;AAAG;AAAH,+0HAArB;AA4KP,OAAO,IAAMC,kBAAkB;AAAG;AAAH,+uDAAxB;AA0FP,OAAO,IAAMC,aAAa;AAAG;AAAH,ooCAAnB;AA4DP,OAAO,IAAMC,qBAAqB;AAAG;AAAH,+jDAA3B;AAyFP,OAAO,IAAMC,qBAAqB;AAAG;AAAH,8zDAA3B;AA2FP,OAAO,IAAMC,aAAa;AAAG;AAAH,2rEAAnB;AAuHP,OAAO,IAAMC,iBAAiB;AAAG;AAAH,81DAAvB;AA6FP,OAAO,IAAMC,kBAAkB;AAAG;AAAH,23CAAxB","sourcesContent":["export const getContract = /* GraphQL */ `\n  query GetContract($id: ID!, $ticketFilter: ModelTicketFilterInput) {\n    getContract(id: $id) {\n      id\n      contractNumber\n      contractType\n      contractState\n      vendorId\n      commodityId\n      contractTo {\n        id\n        vendorNumber\n        companyReportName\n        companyListingName\n        address1\n        address2\n        city\n        state\n        zipCode\n        telephoneNum\n        attention\n        prepayment\n        prepaymentAmt\n        createdAt\n        updatedAt\n      }\n      quantity\n      contractPrice\n      salePrice\n      terms\n      weights\n      basis\n      remarks\n      beginDate\n      endDate\n      dateSigned\n      purchasedFrom\n      tickets(filter: $ticketFilter, limit: 2499) {\n        items {\n          id\n          contractId\n          invoiceId\n          settlementId\n          paymentId\n          correspondingContractId\n          type\n          ticketDate\n          fieldNum\n          baleCount\n          ticketNumber\n          ladingNumber\n          driver\n          truckNumber\n          grossWeight\n          tareWeight\n          netWeight\n          netTons\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      payments {\n        items {\n          id\n          type\n          tFileNumber\n          contractId\n          checkNumber\n          date\n          amount\n          totalPounds\n          invoiceId\n          settlementId\n          tonsCredit\n          overage\n          underage\n          paymentType\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      soldTo\n      commodity {\n        id\n        name\n        calculateCode\n        billingCode\n        poundsPerBushel\n        contracts {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const getPayment = /* GraphQL */ `\n  query GetPayment($id: ID!, $ticketFilter: ModelTicketFilterInput) {\n    getPayment(id: $id) {\n      id\n      type\n      tFileNumber\n      contractId\n      contract {\n        id\n        contractNumber\n        contractType\n        contractState\n        vendorId\n        commodityId\n        contractTo {\n          id\n          vendorNumber\n          companyReportName\n          companyListingName\n          address1\n          address2\n          city\n          state\n          zipCode\n          telephoneNum\n          attention\n          prepayment\n          prepaymentAmt\n          createdAt\n          updatedAt\n        }\n        quantity\n        contractPrice\n        salePrice\n        terms\n        weights\n        basis\n        remarks\n        beginDate\n        endDate\n        dateSigned\n        purchasedFrom\n        tickets {\n          nextToken\n        }\n        payments {\n          nextToken\n        }\n        soldTo\n        commodity {\n          id\n          name\n          calculateCode\n          billingCode\n          poundsPerBushel\n          createdAt\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      tickets(filter: $ticketFilter, limit: 2499) {\n        items {\n          id\n          contractId\n          invoiceId\n          settlementId\n          paymentId\n          correspondingContractId\n          type\n          ticketDate\n          fieldNum\n          baleCount\n          ticketNumber\n          ladingNumber\n          driver\n          truckNumber\n          grossWeight\n          tareWeight\n          netWeight\n          netTons\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      checkNumber\n      date\n      amount\n      totalPounds\n      invoiceId\n      settlementId\n      tonsCredit\n      overage\n      underage\n      paymentType\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const listReportTickets = /* GraphQL */ `\n  query ListTickets(\n    $filter: ModelTicketFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listTickets(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        contractId\n        correspondingContractId\n        type\n        contract {\n          id\n          contractNumber\n          contractType\n\n          contractState\n          contractTo {\n            companyReportName\n            id\n          }\n          commodity {\n            name\n            id\n          }\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        corresondingContract {\n          id\n          contractNumber\n          contractType\n          contractState\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n\n          salePrice\n          beginDate\n          endDate\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        ticketDate\n        fieldNum\n        baleCount\n        ticketNumber\n        ladingNumber\n        driver\n        truckNumber\n        grossWeight\n        tareWeight\n        netWeight\n        netTons\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nexport const settlementsSorted = /* GraphQL */ `\n  query SettlementsSorted(\n    $type: String\n    $dueDate: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSettlementFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    settlementsSorted(\n      type: $type\n      dueDate: $dueDate\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        settlementNumber\n        tickets {\n          items {\n            id\n            contract {\n              id\n              contractNumber\n            }\n          }\n        }\n        vendorId\n        vendor {\n          id\n          vendorNumber\n          companyReportName\n          companyListingName\n          address1\n          address2\n          city\n          state\n          zipCode\n          telephoneNum\n          attention\n          prepayment\n          prepaymentAmt\n          createdAt\n          updatedAt\n        }\n        contractId\n        contract {\n          id\n          contractNumber\n          contractType\n          contractState\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        amountOwed\n        beginDate\n        endDate\n        type\n        dueDate\n        paymentId\n        isPaid\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nexport const invoicesSorted = /* GraphQL */ `\n  query InvoicesSorted(\n    $type: String\n    $dueDate: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelInvoiceFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    invoicesSorted(\n      type: $type\n      dueDate: $dueDate\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        invoiceNumber\n        tickets {\n          items {\n            id\n            contract {\n              id\n              contractNumber\n            }\n          }\n        }\n        contract {\n          contractNumber\n        }\n        vendorId\n        vendor {\n          id\n          vendorNumber\n          companyReportName\n          companyListingName\n          address1\n          address2\n          city\n          state\n          zipCode\n          telephoneNum\n          attention\n          prepayment\n          prepaymentAmt\n          createdAt\n          updatedAt\n        }\n        amountOwed\n        type\n        dueDate\n        paymentId\n        isPaid\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nexport const getInvoice = /* GraphQL */ `\n  query GetInvoice($id: ID!) {\n    getInvoice(id: $id) {\n      id\n      beginDate\n      invoiceNumber\n      contractId\n      contract {\n        id\n        contractNumber\n        contractType\n        contractState\n        vendorId\n        commodityId\n        contractTo {\n          id\n          vendorNumber\n          companyReportName\n          companyListingName\n          address1\n          address2\n          city\n          state\n          zipCode\n          telephoneNum\n          attention\n          prepayment\n          prepaymentAmt\n          createdAt\n          updatedAt\n        }\n        quantity\n        contractPrice\n        salePrice\n        terms\n        weights\n        basis\n        remarks\n        beginDate\n        endDate\n        dateSigned\n        purchasedFrom\n        tickets {\n          nextToken\n        }\n        soldTo\n        commodity {\n          id\n          name\n          calculateCode\n          billingCode\n          poundsPerBushel\n          createdAt\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      endDate\n      tickets {\n        items {\n          id\n          contractId\n          invoiceId\n          correspondingContractId\n          contract {\n            contractNumber\n            salePrice\n            commodity {\n              name\n            }\n          }\n          type\n          ticketDate\n          fieldNum\n          baleCount\n          ticketNumber\n          ladingNumber\n          driver\n          truckNumber\n          grossWeight\n          tareWeight\n          netWeight\n          netTons\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      vendorId\n      vendor {\n        id\n        vendorNumber\n        companyReportName\n        companyListingName\n        address1\n        address2\n        city\n        state\n        zipCode\n        telephoneNum\n        attention\n        prepayment\n        prepaymentAmt\n        createdAt\n        updatedAt\n      }\n      amountOwed\n      type\n      dueDate\n      paymentId\n      isPaid\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const listTickets = /* GraphQL */ `\n  query ListTickets(\n    $filter: ModelTicketFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listTickets(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        contractId\n        invoiceId\n        correspondingContractId\n        type\n        contract {\n          id\n          contractNumber\n          contractType\n          contractState\n          contractTo {\n            companyReportName\n          }\n\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        corresondingContract {\n          id\n          contractNumber\n          contractType\n          contractState\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        ticketDate\n        fieldNum\n        baleCount\n        ticketNumber\n        ladingNumber\n        driver\n        truckNumber\n        grossWeight\n        tareWeight\n        netWeight\n        netTons\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nexport const ticketsByDate = /* GraphQL */ `\n  query TicketsByDate(\n    $type: String\n    $ticketDate: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelTicketFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    ticketsByDate(\n      type: $type\n      ticketDate: $ticketDate\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        contractId\n        invoiceId\n        correspondingContractId\n        type\n        contract {\n          id\n          contractNumber\n          contractType\n          contractState\n          contractTo {\n            companyReportName\n          }\n          vendorId\n          commodityId\n          commodity {\n            name\n          }\n          quantity\n          contractPrice\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        corresondingContract {\n          id\n          contractNumber\n          contractType\n          contractState\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        ticketDate\n        fieldNum\n        baleCount\n        ticketNumber\n        ladingNumber\n        paymentId\n        driver\n        truckNumber\n        grossWeight\n        tareWeight\n        netWeight\n        netTons\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nexport const paymentsSorted = /* GraphQL */ `\n  query PaymentsSorted(\n    $type: String\n    $date: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelPaymentFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    paymentsSorted(\n      type: $type\n      date: $date\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        type\n        tFileNumber\n        contractId\n        contract {\n          id\n          contractNumber\n          contractType\n          contractState\n          contractTo {\n            companyReportName\n          }\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        tickets {\n          items {\n            id\n            ticketNumber\n            netTons\n            netWeight\n            truckNumber\n          }\n        }\n        checkNumber\n        date\n        amount\n        totalPounds\n        invoiceId\n        settlementId\n        tonsCredit\n        overage\n        underage\n        paymentType\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nexport const contractsByType = /* GraphQL */ `\n  query ContractsByType(\n    $contractType: ContractType\n    $endDate: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelContractFilterInput\n    $ticketFilter: ModelTicketFilterInput\n    $paymentDate: ModelStringKeyConditionInput\n    $paymentFilter: ModelPaymentFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    contractsByType(\n      contractType: $contractType\n      endDate: $endDate\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        contractNumber\n        contractType\n        contractState\n        vendorId\n        commodityId\n        contractTo {\n          id\n          vendorNumber\n          companyReportName\n          companyListingName\n          address1\n          address2\n          city\n          state\n          zipCode\n          telephoneNum\n          attention\n          prepayment\n          prepaymentAmt\n          createdAt\n          updatedAt\n        }\n        quantity\n        contractPrice\n        salePrice\n        terms\n        weights\n        basis\n        remarks\n        beginDate\n        endDate\n        dateSigned\n        purchasedFrom\n        payments(date: $paymentDate, filter: $paymentFilter, limit: 3000) {\n          items {\n            id\n            type\n            tFileNumber\n            contractId\n            checkNumber\n            date\n            amount\n            totalPounds\n            invoiceId\n            settlementId\n            tickets(limit: 2000) {\n              items {\n                id\n                ticketDate\n                netTons\n                netWeight\n                tareWeight\n                paymentId\n                ticketNumber\n                updatedAt\n                invoiceId\n              }\n            }\n            tonsCredit\n            overage\n            underage\n            paymentType\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        tickets(filter: $ticketFilter, limit: 2000) {\n          items {\n            id\n            ticketDate\n\n            netTons\n            netWeight\n            tareWeight\n            paymentId\n            ticketNumber\n            updatedAt\n            invoiceId\n            contract {\n              id\n              contractNumber\n              contractType\n              contractState\n              contractTo {\n                companyReportName\n              }\n              vendorId\n              commodityId\n              commodity {\n                name\n              }\n              quantity\n              contractPrice\n              salePrice\n              terms\n              weights\n              basis\n              remarks\n              beginDate\n              endDate\n              dateSigned\n              purchasedFrom\n              soldTo\n              createdAt\n              updatedAt\n            }\n            corresondingContract {\n              id\n              contractNumber\n              contractType\n              contractState\n              vendorId\n              commodityId\n              quantity\n              contractPrice\n              salePrice\n              terms\n              weights\n              basis\n              remarks\n              beginDate\n              endDate\n              dateSigned\n              purchasedFrom\n              soldTo\n              createdAt\n              updatedAt\n            }\n          }\n          nextToken\n        }\n        soldTo\n        commodity {\n          id\n          name\n          calculateCode\n          billingCode\n          poundsPerBushel\n          createdAt\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nexport const invoicesByContract = /* GraphQL */ `\n  query InvoicesByContract(\n    $contractId: ID\n    $dueDate: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelInvoiceFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    invoicesByContract(\n      contractId: $contractId\n      dueDate: $dueDate\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        tickets {\n          items {\n            id\n            ticketDate\n            netTons\n            netWeight\n            tareWeight\n            ticketNumber\n            updatedAt\n            invoiceId\n          }\n          nextToken\n        }\n        vendorId\n        invoiceNumber\n        vendor {\n          id\n          vendorNumber\n          companyReportName\n          companyListingName\n          address1\n          address2\n          city\n          state\n          zipCode\n          telephoneNum\n          attention\n          prepayment\n          prepaymentAmt\n          createdAt\n          updatedAt\n        }\n        contractId\n\n        contract {\n          id\n          contractNumber\n          contractType\n          contractState\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        amountOwed\n        beginDate\n        endDate\n        type\n        dueDate\n        paymentId\n        isPaid\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nexport const listContracts = /* GraphQL */ `\n  query ListContracts(\n    $filter: ModelContractFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listContracts(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        contractNumber\n        contractType\n        contractState\n        vendorId\n        commodityId\n        contractTo {\n          id\n          vendorNumber\n          companyReportName\n          companyListingName\n          address1\n          address2\n          city\n          state\n          zipCode\n          telephoneNum\n          attention\n          prepayment\n          prepaymentAmt\n          createdAt\n          updatedAt\n        }\n        quantity\n        contractPrice\n        salePrice\n        terms\n        weights\n        basis\n        remarks\n        beginDate\n        endDate\n        dateSigned\n        purchasedFrom\n        soldTo\n        commodity {\n          id\n          name\n          calculateCode\n          billingCode\n          poundsPerBushel\n          createdAt\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nexport const getContractAndTickets = /* GraphQL */ `\n  query GetContractAndTickets(\n    $id: ID!\n    $limit: Int\n    $sortDirection: ModelSortDirection\n  ) {\n    getContract(id: $id) {\n      id\n      contractNumber\n      contractType\n      contractState\n      vendorId\n      commodityId\n      contractTo {\n        id\n        vendorNumber\n        companyReportName\n        companyListingName\n        address1\n        address2\n        city\n        state\n        zipCode\n        telephoneNum\n        attention\n        prepayment\n        prepaymentAmt\n        createdAt\n        updatedAt\n      }\n      quantity\n      contractPrice\n      salePrice\n      terms\n      weights\n      basis\n      remarks\n      beginDate\n      endDate\n      dateSigned\n      purchasedFrom\n      soldTo\n      commodity {\n        id\n        name\n        calculateCode\n        billingCode\n        poundsPerBushel\n        contracts {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n    ticketsByContract(\n      contractId: $id\n      limit: $limit\n      sortDirection: $sortDirection\n    ) {\n      items {\n        id\n        invoiceId\n        ticketDate\n        netTons\n        netWeight\n\n        fieldNum\n        fieldNum\n        ticketNumber\n        paymentId\n        contractId\n        correspondingContractId\n        contract {\n          contractNumber\n          contractTo {\n            companyReportName\n          }\n        }\n        corresondingContract {\n          contractNumber\n          id\n        }\n      }\n    }\n  }\n`;\nexport const settlementsByContract = /* GraphQL */ `\n  query SettlementsByContract(\n    $contractId: ID\n    $dueDate: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSettlementFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    settlementsByContract(\n      contractId: $contractId\n      dueDate: $dueDate\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        settlementNumber\n        tickets {\n          items {\n            id\n            ticketDate\n            contract {\n              contractNumber\n            }\n            netTons\n            netWeight\n            tareWeight\n            ticketNumber\n            updatedAt\n            invoiceId\n          }\n          nextToken\n        }\n        vendorId\n        vendor {\n          id\n          vendorNumber\n          companyReportName\n          companyListingName\n          address1\n          address2\n          city\n          state\n          zipCode\n          telephoneNum\n          attention\n          prepayment\n          prepaymentAmt\n          createdAt\n          updatedAt\n        }\n        contractId\n        contract {\n          id\n          contractNumber\n          contractType\n          contractState\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        amountOwed\n        beginDate\n        endDate\n        type\n        dueDate\n        paymentId\n        isPaid\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const getSettlement = /* GraphQL */ `\n  query GetSettlement($id: ID!) {\n    getSettlement(id: $id) {\n      id\n      settlementNumber\n      tickets {\n        items {\n          id\n          contractId\n          invoiceId\n          contract {\n            contractNumber\n            commodity {\n              name\n            }\n            contractPrice\n          }\n\n          settlementId\n          correspondingContractId\n          type\n          ticketDate\n          fieldNum\n          baleCount\n          ticketNumber\n          ladingNumber\n          driver\n          truckNumber\n          grossWeight\n          tareWeight\n          netWeight\n          netTons\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      vendorId\n      vendor {\n        id\n        vendorNumber\n        companyReportName\n        companyListingName\n        address1\n        address2\n        city\n        state\n        zipCode\n        telephoneNum\n        attention\n        prepayment\n        prepaymentAmt\n        createdAt\n        updatedAt\n      }\n      contractId\n      contract {\n        id\n        contractNumber\n        contractType\n        contractState\n        vendorId\n        commodityId\n        contractTo {\n          id\n          vendorNumber\n          companyReportName\n          companyListingName\n          address1\n          address2\n          city\n          state\n          zipCode\n          telephoneNum\n          attention\n          prepayment\n          prepaymentAmt\n          createdAt\n          updatedAt\n        }\n        quantity\n        contractPrice\n        salePrice\n        terms\n        weights\n        basis\n        remarks\n        beginDate\n        endDate\n        dateSigned\n        purchasedFrom\n        tickets {\n          nextToken\n        }\n        soldTo\n        commodity {\n          id\n          name\n          calculateCode\n          billingCode\n          poundsPerBushel\n          createdAt\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      amountOwed\n      beginDate\n      endDate\n      type\n      dueDate\n      paymentId\n      isPaid\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const ticketsByContract = /* GraphQL */ `\n  query TicketsByContract(\n    $contractId: ID\n    $ticketDate: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelTicketFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    ticketsByContract(\n      contractId: $contractId\n      ticketDate: $ticketDate\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        contractId\n        invoiceId\n        settlementId\n        correspondingContractId\n        type\n        contract {\n          id\n          contractNumber\n          contractType\n          contractState\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n          contractTo {\n            companyReportName\n          }\n          commodity {\n            name\n          }\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        corresondingContract {\n          id\n          contractNumber\n          contractType\n          contractState\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        ticketDate\n        fieldNum\n        baleCount\n        ticketNumber\n        ladingNumber\n        driver\n        truckNumber\n        grossWeight\n        tareWeight\n        netWeight\n        netTons\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nexport const paymentsByContract = /* GraphQL */ `\n  query PaymentsByContract(\n    $contractId: ID\n    $date: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelPaymentFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    paymentsByContract(\n      contractId: $contractId\n      date: $date\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        type\n        tFileNumber\n        contractId\n        overage\n        underage\n        contract {\n          id\n          contractNumber\n          contractType\n          contractState\n          vendorId\n          commodityId\n          quantity\n          contractPrice\n          salePrice\n          terms\n          weights\n          basis\n          remarks\n          beginDate\n          endDate\n          dateSigned\n          purchasedFrom\n          soldTo\n          createdAt\n          updatedAt\n        }\n        tickets {\n          items {\n            ticketNumber\n            netTons\n            netWeight\n            id\n            ticketDate\n          }\n          nextToken\n        }\n        checkNumber\n        date\n        amount\n        totalPounds\n        invoiceId\n        settlementId\n        tonsCredit\n        paymentType\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}